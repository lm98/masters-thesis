@article{CASADEI2022101248,
  title    = {ScaFi: A Scala DSL and Toolkit for Aggregate Programming},
  journal  = {SoftwareX},
  volume   = {20},
  pages    = {101248},
  year     = {2022},
  issn     = {2352-7110},
  doi      = {https://doi.org/10.1016/j.softx.2022.101248},
  url      = {https://www.sciencedirect.com/science/article/pii/S2352711022001662},
  author   = {Roberto Casadei and Mirko Viroli and Gianluca Aguzzi and Danilo Pianini},
  keywords = {Aggregate programming, Computational fields, Macro-level programming, Distributed computing, Scala toolkit},
  abstract = {Supported by current socio-scientific trends, programming the global behaviour of whole computational collectives makes for great opportunities, but also significant challenges. Recently, aggregate computing has emerged as a prominent paradigm for so-called collective adaptive systems programming. To shorten the gap between such research endeavours and mainstream software development and engineering, we present ScaFi, a Scala toolkit providing an internal domain-specific language, libraries, a simulation environment, and runtime support for practical aggregate computing systems development.}
}

@article{7274429,
  author   = {Beal, Jacob and Pianini, Danilo and Viroli, Mirko},
  journal  = {Computer},
  title    = {Aggregate Programming for the Internet of Things},
  year     = {2015},
  volume   = {48},
  number   = {9},
  pages    = {22-30},
  keywords = {Internet of things;Programming;Embedded systems;Internet of things;Aggregate programmin;Pervasive computing;aggregate programming;pervasive computing;field calculus;distributed systems;domain-specific languages;DSLs;embedded systems;Internet of Things;IoT},
  doi      = {10.1109/MC.2015.261}
}

@inproceedings{10.1145/2957319.2957372,
  author    = {Casadei, Roberto and Viroli, Mirko},
  title     = {Towards Aggregate Programming in Scala},
  year      = {2016},
  isbn      = {9781450347754},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2957319.2957372},
  doi       = {10.1145/2957319.2957372},
  abstract  = {Recent works in the context of large-scale adaptive systems, such as those for the Internet of Things (IoT) scenario, promote aggregate programming [3], a development approach for distributed systems in which one programs the aggregate of computational devices instead of individual ones. This makes the resulting behaviour highly insensitive to network size, density, and topology, and as such, intrinsically robust to failures and changes to working conditions (e.g., location of computational load, communication technology, and computational infrastructure).In this paper we are concerned with how this approach can impact mainstream software development, and hence outline a Scala-based support of aggregate programming, leveraging Scala advanced type system, DSL support, and actors mechanisms.},
  booktitle = {First Workshop on Programming Models and Languages for Distributed Computing},
  articleno = {5},
  numpages  = {7},
  keywords  = {DSL, Scala, aggregate programming, complex adaptive systems, distributed platform},
  location  = {Rome, Italy},
  series    = {PMLDC '16}
}

@inbook{Beal2016,
  author    = {Beal, Jacob
               and Viroli, Mirko},
  editor    = {Bernardo, Marco
               and De Nicola, Rocco
               and Hillston, Jane},
  title     = {Aggregate Programming: From Foundations to Applications},
  booktitle = {Formal Methods for the Quantitative Evaluation of Collective Adaptive Systems: 16th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2016, Bertinoro, Italy, June 20-24, 2016, Advanced Lectures},
  year      = {2016},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {233--260},
  abstract  = {We live in a world with an ever-increasing density of computing devices, pervading every aspect of our environment. Programming these devices is challenging, due to their large numbers, potential for frequent and complex network interactions with other nearby devices, and the open and evolving nature of their capabilities and applications. Aggregate programming addresses these challenges by raising the level of abstraction, so that a programmer can operate in terms of collections of interacting devices. In particular, field calculus provides a safe and extensible model for encapsulation, modulation, and composition of services. On this foundation, a set of resilient ``building block'' operators support development of APIs that can provide resilience and scalability guarantees for any service developed using them. We illustrate the power of this approach by discussion of several recent applications, including crowd safety at mass public events, disaster relief operations, construction of resilient enterprise systems, and network security.},
  isbn      = {978-3-319-34096-8},
  doi       = {10.1007/978-3-319-34096-8_8},
  url       = {https://doi.org/10.1007/978-3-319-34096-8_8}
}

@inproceedings{10.1007/978-3-642-45364-9_11,
  author    = {Viroli, Mirko
               and Damiani, Ferruccio
               and Beal, Jacob},
  editor    = {Canal, Carlos
               and Villari, Massimo},
  title     = {A Calculus of Computational Fields},
  booktitle = {Advances in Service-Oriented and Cloud Computing},
  year      = {2013},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {114--128},
  abstract  = {A number of recent works have investigated the notion of ``computational fields'' as a means of coordinating systems in distributed, dense and mobile environments such as pervasive computing, sensor networks, and robot swarms. We introduce a minimal core calculus meant to capture the key ingredients of languages that make use of computational fields: functional composition of fields, functions over fields, evolution of fields over time, construction of fields of values from neighbours, and restriction of a field computation to a sub-region of the network. This calculus can act as a core for actual implementation of coordination languages and models, as well as pave the way towards formal analysis of properties concerning expressiveness, self-stabilisation, topology independence, and relationships with the continuous space-time semantics of spatial computations.},
  isbn      = {978-3-642-45364-9}
}

@article{10.1145/3285956,
  author     = {Audrito, Giorgio and Viroli, Mirko and Damiani, Ferruccio and Pianini, Danilo and Beal, Jacob},
  title      = {A Higher-Order Calculus of Computational Fields},
  year       = {2019},
  issue_date = {January 2019},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {20},
  number     = {1},
  issn       = {1529-3785},
  url        = {https://doi.org/10.1145/3285956},
  doi        = {10.1145/3285956},
  abstract   = {The complexity of large-scale distributed systems, particularly when deployed in physical space, calls for new mechanisms to address composability and reusability of collective adaptive behaviour. Computational fields have been proposed as an effective abstraction to fill the gap between the macro-level of such systems (specifying a system’s collective behaviour) and the micro-level (individual devices’ actions of computation and interaction to implement that collective specification), thereby providing a basis to better facilitate the engineering of collective APIs and complex systems at higher levels of abstraction. This article proposes a full formal foundation for field computations, in terms of a core (higher-order) calculus of computational fields containing a few key syntactic constructs, and equipped with typing, denotational and operational semantics. Critically, this allows formal establishment of a link between the micro- and macro-levels of collective adaptive systems by a result of computational adequacy and abstraction for the (aggregate) denotational semantics with respect to the (per-device) operational semantics.},
  journal    = {ACM Trans. Comput. Logic},
  month      = {jan},
  articleno  = {5},
  numpages   = {55},
  keywords   = {type soundness, type inference system, spatial computing, full abstraction, core calculus, computational field, aggregate programming, Adequacy}
}

@misc{001,
  author       = {Cortecchia, Angela and Micelli, Leonardo and Penazzi, Paolo and Vissani, Filippo},
  title        = {A port of the ScaFi framework in the Rust Language},
  year         = {2023},
  howpublished = {url{https://rustfields.github.io},}
}

@inproceedings{7056345,
  author    = {Beal, Jacob and Viroli, Mirko},
  booktitle = {2014 IEEE Eighth International Conference on Self-Adaptive and Self-Organizing Systems Workshops},
  title     = {Building Blocks for Aggregate Programming of Self-Organising Applications},
  year      = {2014},
  volume    = {},
  number    = {},
  pages     = {8-13},
  keywords  = {Calculus;Measurement;Aggregates;Lead;Sensors;Programming;Taxonomy;field calculus;self-stabilisation;aggregate programming;distributed algorithms},
  doi       = {10.1109/SASOW.2014.6}
}

@misc{002,
  author       = {Klabnik, Steve and Nichols, Carol},
  title        = {The Rust Programming Language},
  howpublished = {url          = {https://doc.rust-lang.org/book/title-page.html},}
}

@article{li2015internet,
  title     = {The internet of things: a survey},
  author    = {Li, Shancang and Xu, Li Da and Zhao, Shanshan},
  journal   = {Information systems frontiers},
  volume    = {17},
  pages     = {243--259},
  year      = {2015},
  publisher = {Springer}
}

@article{satyanarayanan2001pervasive,
  title     = {Pervasive computing: Vision and challenges},
  author    = {Satyanarayanan, Mahadev},
  journal   = {IEEE Personal communications},
  volume    = {8},
  number    = {4},
  pages     = {10--17},
  year      = {2001},
  publisher = {IEEE}
}

@article{rose2015internet,
  title     = {The internet of things: An overview},
  author    = {Rose, Karen and Eldridge, Scott and Chapin, Lyman},
  journal   = {The internet society (ISOC)},
  volume    = {80},
  pages     = {1--50},
  year      = {2015},
  publisher = {Reston, VA}
}

@misc{003,
  author       = {Bob Nystrom},
  title        = {What Color is Your Function?},
  howpublished = {url          = {https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/},}
}
